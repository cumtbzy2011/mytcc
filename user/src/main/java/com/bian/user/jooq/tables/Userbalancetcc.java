/*
 * This file is generated by jOOQ.
*/
package com.bian.user.jooq.tables;


import com.bian.user.jooq.Indexes;
import com.bian.user.jooq.Keys;
import com.bian.user.jooq.User;
import com.bian.user.jooq.tables.records.UserbalancetccRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Userbalancetcc extends TableImpl<UserbalancetccRecord> {

    private static final long serialVersionUID = -860110922;

    /**
     * The reference instance of <code>user.userbalancetcc</code>
     */
    public static final Userbalancetcc USERBALANCETCC = new Userbalancetcc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserbalancetccRecord> getRecordType() {
        return UserbalancetccRecord.class;
    }

    /**
     * The column <code>user.userbalancetcc.id</code>.
     */
    public final TableField<UserbalancetccRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>user.userbalancetcc.create_time</code>.
     */
    public final TableField<UserbalancetccRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>user.userbalancetcc.update_time</code>.
     */
    public final TableField<UserbalancetccRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>user.userbalancetcc.delete_time</code>.
     */
    public final TableField<UserbalancetccRecord, Timestamp> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1970-01-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>user.userbalancetcc.expire_time</code>.
     */
    public final TableField<UserbalancetccRecord, Timestamp> EXPIRE_TIME = createField("expire_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1970-01-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>user.userbalancetcc.amount</code>. 预留资源金额
     */
    public final TableField<UserbalancetccRecord, Long> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "预留资源金额");

    /**
     * The column <code>user.userbalancetcc.status</code>. 0为try, 1为confirm完成
     */
    public final TableField<UserbalancetccRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0为try, 1为confirm完成");

    /**
     * The column <code>user.userbalancetcc.t_user_id</code>.
     */
    public final TableField<UserbalancetccRecord, ULong> T_USER_ID = createField("t_user_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * Create a <code>user.userbalancetcc</code> table reference
     */
    public Userbalancetcc() {
        this(DSL.name("userbalancetcc"), null);
    }

    /**
     * Create an aliased <code>user.userbalancetcc</code> table reference
     */
    public Userbalancetcc(String alias) {
        this(DSL.name(alias), USERBALANCETCC);
    }

    /**
     * Create an aliased <code>user.userbalancetcc</code> table reference
     */
    public Userbalancetcc(Name alias) {
        this(alias, USERBALANCETCC);
    }

    private Userbalancetcc(Name alias, Table<UserbalancetccRecord> aliased) {
        this(alias, aliased, null);
    }

    private Userbalancetcc(Name alias, Table<UserbalancetccRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return User.USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERBALANCETCC_FK_T_USER_TCC_STATUS_EXPTIME, Indexes.USERBALANCETCC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserbalancetccRecord, ULong> getIdentity() {
        return Keys.IDENTITY_USERBALANCETCC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserbalancetccRecord> getPrimaryKey() {
        return Keys.KEY_USERBALANCETCC_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserbalancetccRecord>> getKeys() {
        return Arrays.<UniqueKey<UserbalancetccRecord>>asList(Keys.KEY_USERBALANCETCC_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Userbalancetcc as(String alias) {
        return new Userbalancetcc(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Userbalancetcc as(Name alias) {
        return new Userbalancetcc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Userbalancetcc rename(String name) {
        return new Userbalancetcc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Userbalancetcc rename(Name name) {
        return new Userbalancetcc(name, null);
    }
}
