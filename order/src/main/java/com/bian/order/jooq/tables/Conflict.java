/*
 * This file is generated by jOOQ.
*/
package com.bian.order.jooq.tables;


import com.bian.order.jooq.Indexes;
import com.bian.order.jooq.Keys;
import com.bian.order.jooq.Order;
import com.bian.order.jooq.tables.records.ConflictRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conflict extends TableImpl<ConflictRecord> {

    private static final long serialVersionUID = -1727228287;

    /**
     * The reference instance of <code>order.conflict</code>
     */
    public static final Conflict CONFLICT = new Conflict();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConflictRecord> getRecordType() {
        return ConflictRecord.class;
    }

    /**
     * The column <code>order.conflict.id</code>.
     */
    public final TableField<ConflictRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>order.conflict.create_time</code>.
     */
    public final TableField<ConflictRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>order.conflict.update_time</code>.
     */
    public final TableField<ConflictRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>order.conflict.delete_time</code>.
     */
    public final TableField<ConflictRecord, Timestamp> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1970-01-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>order.conflict.error_detail</code>. 资源冲突时的详细记录, 留作人工处理
     */
    public final TableField<ConflictRecord, String> ERROR_DETAIL = createField("error_detail", org.jooq.impl.SQLDataType.VARCHAR(4096).nullable(false), this, "资源冲突时的详细记录, 留作人工处理");

    /**
     * The column <code>order.conflict.t_order_id</code>. 订单ID
     */
    public final TableField<ConflictRecord, ULong> T_ORDER_ID = createField("t_order_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "订单ID");

    /**
     * Create a <code>order.conflict</code> table reference
     */
    public Conflict() {
        this(DSL.name("conflict"), null);
    }

    /**
     * Create an aliased <code>order.conflict</code> table reference
     */
    public Conflict(String alias) {
        this(DSL.name(alias), CONFLICT);
    }

    /**
     * Create an aliased <code>order.conflict</code> table reference
     */
    public Conflict(Name alias) {
        this(alias, CONFLICT);
    }

    private Conflict(Name alias, Table<ConflictRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conflict(Name alias, Table<ConflictRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Order.ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONFLICT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ConflictRecord, ULong> getIdentity() {
        return Keys.IDENTITY_CONFLICT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConflictRecord> getPrimaryKey() {
        return Keys.KEY_CONFLICT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConflictRecord>> getKeys() {
        return Arrays.<UniqueKey<ConflictRecord>>asList(Keys.KEY_CONFLICT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conflict as(String alias) {
        return new Conflict(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conflict as(Name alias) {
        return new Conflict(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conflict rename(String name) {
        return new Conflict(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conflict rename(Name name) {
        return new Conflict(name, null);
    }
}
