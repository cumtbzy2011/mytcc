/*
 * This file is generated by jOOQ.
*/
package com.bian.order.jooq.tables;


import com.bian.order.jooq.Indexes;
import com.bian.order.jooq.Keys;
import com.bian.order.jooq.Order;
import com.bian.order.jooq.tables.records.ParticipantRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Participant extends TableImpl<ParticipantRecord> {

    private static final long serialVersionUID = -2041834656;

    /**
     * The reference instance of <code>order.participant</code>
     */
    public static final Participant PARTICIPANT = new Participant();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ParticipantRecord> getRecordType() {
        return ParticipantRecord.class;
    }

    /**
     * The column <code>order.participant.id</code>.
     */
    public final TableField<ParticipantRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>order.participant.create_time</code>.
     */
    public final TableField<ParticipantRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>order.participant.update_time</code>.
     */
    public final TableField<ParticipantRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>order.participant.delete_time</code>.
     */
    public final TableField<ParticipantRecord, Timestamp> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1970-01-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>order.participant.expire_time</code>. 预留资源过期时间
     */
    public final TableField<ParticipantRecord, Timestamp> EXPIRE_TIME = createField("expire_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "预留资源过期时间");

    /**
     * The column <code>order.participant.uri</code>. 预留资源确认URI
     */
    public final TableField<ParticipantRecord, String> URI = createField("uri", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "预留资源确认URI");

    /**
     * The column <code>order.participant.t_order_id</code>. 订单ID
     */
    public final TableField<ParticipantRecord, ULong> T_ORDER_ID = createField("t_order_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "订单ID");

    /**
     * Create a <code>order.participant</code> table reference
     */
    public Participant() {
        this(DSL.name("participant"), null);
    }

    /**
     * Create an aliased <code>order.participant</code> table reference
     */
    public Participant(String alias) {
        this(DSL.name(alias), PARTICIPANT);
    }

    /**
     * Create an aliased <code>order.participant</code> table reference
     */
    public Participant(Name alias) {
        this(alias, PARTICIPANT);
    }

    private Participant(Name alias, Table<ParticipantRecord> aliased) {
        this(alias, aliased, null);
    }

    private Participant(Name alias, Table<ParticipantRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Order.ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PARTICIPANT_IDX_ORDER_PARTICIPANT_ID, Indexes.PARTICIPANT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ParticipantRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PARTICIPANT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ParticipantRecord> getPrimaryKey() {
        return Keys.KEY_PARTICIPANT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ParticipantRecord>> getKeys() {
        return Arrays.<UniqueKey<ParticipantRecord>>asList(Keys.KEY_PARTICIPANT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Participant as(String alias) {
        return new Participant(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Participant as(Name alias) {
        return new Participant(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Participant rename(String name) {
        return new Participant(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Participant rename(Name name) {
        return new Participant(name, null);
    }
}
