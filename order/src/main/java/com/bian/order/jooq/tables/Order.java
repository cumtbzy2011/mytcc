/*
 * This file is generated by jOOQ.
*/
package com.bian.order.jooq.tables;


import com.bian.order.jooq.Indexes;
import com.bian.order.jooq.Keys;
import com.bian.order.jooq.tables.records.OrderRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1792282454;

    /**
     * The reference instance of <code>order.order</code>
     */
    public static final Order ORDER_ = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>order.order.id</code>.
     */
    public final TableField<OrderRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>order.order.create_time</code>.
     */
    public final TableField<OrderRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>order.order.update_time</code>.
     */
    public final TableField<OrderRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1970-01-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>order.order.delete_time</code>.
     */
    public final TableField<OrderRecord, Timestamp> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1970-01-01 00:00:00", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>order.order.user_id</code>. 下单用户ID
     */
    public final TableField<OrderRecord, ULong> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "下单用户ID");

    /**
     * The column <code>order.order.product_id</code>. 产品ID
     */
    public final TableField<OrderRecord, ULong> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "产品ID");

    /**
     * The column <code>order.order.price</code>. 实际支付金额
     */
    public final TableField<OrderRecord, UInteger> PRICE = createField("price", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "实际支付金额");

    /**
     * The column <code>order.order.status</code>. 订单状态, 0为支付中, 1为交易完成, 2为全部资源已被撤销, 3为资源确认冲突
     */
    public final TableField<OrderRecord, UByte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "订单状态, 0为支付中, 1为交易完成, 2为全部资源已被撤销, 3为资源确认冲突");

    /**
     * Create a <code>order.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    /**
     * Create an aliased <code>order.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER_);
    }

    /**
     * Create an aliased <code>order.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER_);
    }

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return com.bian.order.jooq.Order.ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_IDX_ORDER_USER_ID_CT, Indexes.ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrderRecord, ULong> getIdentity() {
        return Keys.IDENTITY_ORDER_;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrderRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderRecord>>asList(Keys.KEY_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }
}
